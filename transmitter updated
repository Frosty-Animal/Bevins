#include <xc.h>
#include <stdio.h>
#include <string.h>

// Configuration bits must be at the top of the file
#pragma config FOSC = INTOSC    // Internal oscillator
#pragma config WDTE = OFF       // Watchdog Timer disabled
#pragma config PWRTE = ON       // Power-up Timer enabled
#pragma config MCLRE = OFF      // MCLR pin function is digital input
#pragma config CP = OFF         // Program memory not protected
#pragma config BOREN = ON       // Brown-out Reset enabled

// Configuration: assume a 16MHz clock and 115200 baud UART
#define _XTAL_FREQ 16000000
#define BAUD_RATE 115200

// -----------------------------------------------------------------
// Global Timing Variables and Thresholds
// -----------------------------------------------------------------
volatile unsigned int linkTimeout = 0;   // Refreshed when RN4020 responds
volatile unsigned int sleepTimer = 0;      // Incremented in Timer0 ISR
#define SLEEP_THRESHOLD 5000               // Example threshold (adjust as needed)
unsigned int consecutiveFailures = 0;      // For tracking communication failures
unsigned int statusRequestTimer = 0;       // Timer for requesting receiver status
#define STATUS_REQUEST_INTERVAL 30         // Request status every 30 cycles

// -----------------------------------------------------------------
// UART and RN4020 Bluetooth Module Pin Definitions
// -----------------------------------------------------------------
#define UART_TX_TRIS    TRISB7
#define UART_RX_TRIS    TRISB5
#define CTS_PIN         LATB4
#define CTS_TRIS        TRISB4
#define RN4020_RTS      PORTBbits.RB6
#define WAKE_HW         LATC6           // WAKE_HW now on RC6 (PIC pin 5)
#define WAKE_HW_TRIS    TRISC6          // TRISC6 for WAKE_HW

// -----------------------------------------------------------------
// Local Sensor Definitions
// -----------------------------------------------------------------
#define LOCAL_POT_CHANNEL  2      // AN2 on RA2 (pin 14)
#define POT_TRIS           TRISAbits.TRISA2

// -----------------------------------------------------------------
// LED Definitions
// -----------------------------------------------------------------
#define POWER_LED_PIN      LATCbits.LATC3  // Power indicator LED on RC3 (pin 4)
#define POWER_LED_TRIS     TRISCbits.TRISC3
#define LINK_LED_PIN       LATCbits.LATC5  // Link indicator LED on RC5 (pin 2)
#define LINK_LED_TRIS      TRISCbits.TRISC5

// LED control functions (for power/status LED)
void LED_On(void) { POWER_LED_PIN = 1; }
void LED_Off(void) { POWER_LED_PIN = 0; }
void LED_Toggle(void) { POWER_LED_PIN = !POWER_LED_PIN; }

// -----------------------------------------------------------------
// Potentiometer Processing Definitions (for deadband and scaling)
// -----------------------------------------------------------------
#define HLO 411               // Lower threshold (deadband start)
#define HHI 511               // Upper threshold (deadband end)
float hsf = 0.62;             // Scaling factor for reverse (pot value < HLO)
float hhsf = 0.74;            // Scaling factor for forward (pot value > HHI)

volatile short dutyCycle = 0;           // Computed duty cycle based on pot reading
volatile unsigned char direction = 0;     // 0 for forward, 1 for reverse

// -----------------------------------------------------------------
// Battery ADC Channel (for battery voltage on RA4 = AN3)
// -----------------------------------------------------------------
#define BATTERY_ADC_CHANNEL 3

// -----------------------------------------------------------------
// Receiver Status Variables
// -----------------------------------------------------------------
float receiverBatteryVoltage = 0.0;    // Last reported receiver battery voltage
int receiverDutyCycle = 0;             // Last reported receiver duty cycle
char receiverDirection[4] = "FWD";     // Last reported receiver direction

// -----------------------------------------------------------------
// Function Prototypes
// -----------------------------------------------------------------
void UART_Init(void);
void UART_Write(char data);
char UART_Read(void);
void UART_SendString(const char* str);
void WaitFor_RN4020_RTS(void);
void ADC_Init(void);
unsigned int readLocalPot(void);
unsigned int readBattery(void);
void checkBattery(void);
void CheckPot(void);  // New function for processing potentiometer reading
void RN4020_SendCommand(const char* cmd, char* responseBuffer, unsigned int timeout);
void Timer0_Init(void);
void configureRN4020(void);
void requestReceiverStatus(void);
void __interrupt() isr(void);

// -----------------------------------------------------------------
// Main Function
// -----------------------------------------------------------------
void main(void) {
    // Initialize subsystems
    UART_Init();
    ADC_Init();
    Timer0_Init();  // Initialize Timer0 for periodic interrupts

    // Configure LED outputs:
    POWER_LED_TRIS = 0;   // Power indicator LED (RC3) as output
    LED_Off();            // Start with power LED off
    LINK_LED_TRIS = 0;    // Link indicator LED (RC5) as output
    LINK_LED_PIN = 0;     // Start with link LED off

    // Configure RN4020 control pins:
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;         // Drive WAKE_HW high (RC6) to wake RN4020
    CTS_TRIS = 0;
    CTS_PIN = 1;         // Drive CTS high

    __delay_ms(500);     // Allow RN4020 to power up

    // Configure RN4020 Bluetooth module with comprehensive settings
    configureRN4020();

    // Indicate transmitter is ready
    UART_SendString("Transmitter Ready\r\n");
    LED_On();  // Turn on power LED to indicate good power

    // Refresh link indicator on startup
    linkTimeout = 50;
    sleepTimer = 0;       // Reset sleep timer
    statusRequestTimer = 0; // Reset status request timer

    while (1) {
        // Update link indicator:
        if (linkTimeout > 0) {
            LINK_LED_PIN = 1;   // Link active
            consecutiveFailures = 0;
        } else {
            LINK_LED_PIN = 0;   // Link lost
            
            // Try to reestablish connection after several failures
            consecutiveFailures++;
            if (consecutiveFailures > 10) {
                // Connection appears lost, try to reestablish
                UART_SendString("$$$");  // Enter command mode
                __delay_ms(100);
                UART_SendString("C\r");  // Try to reconnect
                __delay_ms(100);
                consecutiveFailures = 0;
            }
        }
        
        // Process potentiometer and send motor commands
        CheckPot();
        
        // Check battery voltage and update the power indicator LED
        checkBattery();
        
        // Periodically request status from the receiver
        if (++statusRequestTimer >= STATUS_REQUEST_INTERVAL) {
            requestReceiverStatus();
            statusRequestTimer = 0;
        }
        
        // If no activity occurs, sleepTimer will increment in the ISR.
        // If sleepTimer exceeds the threshold, put the MCU to sleep.
        if (sleepTimer >= SLEEP_THRESHOLD) {
            // Before sleeping, disable interrupts
            di();  // Disable global interrupts (or use INTCONbits.GIE = 0;)
            // Optionally, turn off peripherals here
            SLEEP();  // Enter low-power sleep mode
            // MCU wakes up on an interrupt (e.g., Timer0)
            ei();  // Enable global interrupts (or use INTCONbits.GIE = 1;)
            sleepTimer = 0;  // Reset sleep timer after waking up
        }
        
        __delay_ms(100);  // Faster update rate for more responsive control
    }
}

// -----------------------------------------------------------------
// RN4020 Comprehensive Configuration
// -----------------------------------------------------------------
void configureRN4020(void) {
    char response[30] = {0};
    
    // Enter command mode
    UART_SendString("$$$");
    __delay_ms(100);
    
    // Factory reset for clean configuration
    RN4020_SendCommand("SF,1", response, 500);
    __delay_ms(100);
    
    // Set device name
    RN4020_SendCommand("SN,MWBevinRatchetTx", response, 500);
    __delay_ms(100);
    
    // Configure services (matching receiver)
    RN4020_SendCommand("SS,80800000", response, 500);
    __delay_ms(100);
    
    // Configure the same Private Service UUID as the receiver
    RN4020_SendCommand("PS,11223344556677889900AABBCCDDEEFF", response, 500);
    __delay_ms(100);
    
    // Define private characteristic for motor control (matching receiver)
    RN4020_SendCommand("PC,ABCD,0A,10", response, 500);
    __delay_ms(100);
    
    // Define private characteristic for status reading
    RN4020_SendCommand("PC,DCBA,12,20", response, 500);
    __delay_ms(100);
    
    // Enable server services
    RN4020_SendCommand("A", response, 500);
    __delay_ms(100);
    
    // Set connection parameters:
    // Min Interval = 10ms, Max Interval = 20ms, Latency = 0, Timeout = 1000ms
    RN4020_SendCommand("SGA,6,C,0,64", response, 500);
    __delay_ms(100);
    
    // Save settings and reboot to apply
    RN4020_SendCommand("R,1", response, 500);
    __delay_ms(1000);
}

// -----------------------------------------------------------------
// Request and Process Receiver Status
// -----------------------------------------------------------------
void requestReceiverStatus(void) {
    // Request status from receiver
    UART_SendString("STAT?\r\n");
    
    // Wait for response
    char response[50] = {0};
    unsigned int timer = 0;
    unsigned int idx = 0;
    
    while (timer < 300) { // 300ms timeout
        if (RCIF) {
            char ch = UART_Read();
            response[idx++] = ch;
            response[idx] = '\0';
            if (ch == '\n') break;
        }
        __delay_ms(1);
        timer++;
    }
    
    // Process receiver status if received
    if (strncmp(response, "STAT:", 5) == 0) {
        if (sscanf(response + 5, "%d,%3s,%fV", &receiverDutyCycle, receiverDirection, &receiverBatteryVoltage) >= 2) {
            // Update link timeout since we received valid data
            linkTimeout = 50;
            
            // Optionally use these values for display or diagnostics
            char debugBuffer[50];
            sprintf(debugBuffer, "Receiver: %d, %s, %.1fV\r\n", 
                    receiverDutyCycle, receiverDirection, receiverBatteryVoltage);
            UART_SendString(debugBuffer);
        }
    }
}

// -----------------------------------------------------------------
// UART Functions
// -----------------------------------------------------------------
void UART_Init(void) {
    // Configure TX (RB7) as output and RX (RB5) as input
    UART_TX_TRIS = 0;
    UART_RX_TRIS = 1;
    
    // WAKE_HW: now on RC6 as output, drive high
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;
    
    // CTS: RB4 as output, drive high
    CTS_TRIS = 0;
    CTS_PIN = 1;
    
    // RTS: RB6 as input
    TRISB6 = 1;
    
    // Setup 115200 baud
    SPBRG = ((_XTAL_FREQ / (16UL * BAUD_RATE)) - 1);
    TXSTA = 0b00100100;  // TX enabled, BRGH = 1 (high speed)
    RCSTA = 0b10010000;  // Serial port enabled, continuous receive
    TXEN = 1;
    SPEN = 1;
}

void WaitFor_RN4020_RTS(void) {
    // Wait until RN4020's RTS (RB6) indicates readiness (active high)
    while (RN4020_RTS == 0) {
        // Optionally add a short delay here
        __delay_us(10);  // Added short delay to prevent tight loop
    }
}

void UART_Write(char data) {
    WaitFor_RN4020_RTS();
    while (!TXIF);
    TXREG = data;
}

char UART_Read(void) {
    while (!RCIF);
    return RCREG;
}

void UART_SendString(const char* str) {
    while (*str) {
        UART_Write(*str++);
    }
}

// -----------------------------------------------------------------
// ADC Functions for Local Potentiometer (AN2 on RA2, pin 14)
// -----------------------------------------------------------------
void ADC_Init(void) {
    // Enable analog function on RA2 (bit 2 of ANSELA) for the local potentiometer
    ANSELA |= 0x04;  // 0x04 sets AN2 as analog
    // Enable analog function on RA4 (bit 4 of ANSELA) for battery (AN3)
    ANSELA |= 0x10;  // 0x10 sets AN4 as analog (adjust if needed for AN3)
    // Configure ADC: right justified, Fosc/32, Vref = VDD.
    ADCON1 = 0xA0;
    ADCON2 = 0x00; // Manual trigger
}

unsigned int readLocalPot(void) {
    // Select channel for local pot (AN2)
    ADCON0 = (LOCAL_POT_CHANNEL << 2);
    ADCON0bits.ADON = 1;              // Turn on ADC
    __delay_us(10);                   // Acquisition time
    ADCON0bits.GO_nDONE = 1;          // Start conversion
    while(ADCON0bits.GO_nDONE);       // Wait for conversion
    unsigned int result = ((unsigned int)ADRESH << 8) | ADRESL;
    return result;
}

// -----------------------------------------------------------------
// CheckPot: Process the potentiometer reading with deadband and scaling
// -----------------------------------------------------------------
void CheckPot(void) {
    unsigned int rawValue = readLocalPot();  // Read raw ADC value (0-1023)
    
    if ((rawValue >= HLO) && (rawValue <= HHI)) {
         dutyCycle = 0;  // Within deadband: no movement
    }
    else if (rawValue < HLO) {
         dutyCycle = (short)((HLO - rawValue) * hsf);
         direction = 1;  // Reverse direction
    }
    else if (rawValue > HHI) {
         dutyCycle = (short)((rawValue - HHI) * hhsf);
         direction = 0;  // Forward direction
    }
    
    // Clamp the dutyCycle value to the range [0, 102]
    if (dutyCycle < 0) dutyCycle = 0;
    if (dutyCycle > 102) dutyCycle = 102;
     if (dutyCycle != 0) {
         sleepTimer = 0;
    }
    
    // Transmit processed data with MTR: prefix to match the receiver's expected format
    char dataBuffer[30];
    sprintf(dataBuffer, "MTR:%d,%s\r\n", dutyCycle, (direction == 1) ? "REV" : "FWD");
    UART_SendString(dataBuffer);
}

// -----------------------------------------------------------------
// Battery Voltage Functions (using RA4, AN3)
// -----------------------------------------------------------------
unsigned int readBattery(void) {
    // Battery on AN3 (assuming channel 3 corresponds to RA4)
    ADCON0 = (BATTERY_ADC_CHANNEL << 2);
    ADCON0bits.ADON = 1;
    __delay_us(10);
    ADCON0bits.GO_nDONE = 1;
    while(ADCON0bits.GO_nDONE);
    unsigned int result = ((unsigned int)ADRESH << 8) | ADRESL;
    return result;
}

void checkBattery(void) {
    unsigned int adcVal = readBattery();
    float voltage = adcVal * (3.3 / 1023.0);
    
    // Store battery voltage in a buffer
    char buffer[30];
    sprintf(buffer, "Battery: %.2fV\r\n", voltage);
    
    // Only send battery information occasionally to reduce traffic
    static unsigned char batteryReportCounter = 0;
    if (++batteryReportCounter >= 20) {  // Report every 20 cycles
        UART_SendString(buffer);
        batteryReportCounter = 0;
    }
    
    // Use the power indicator LED on RC3 (pin 4) to indicate power status.
    if (voltage >= 3.0)
        POWER_LED_PIN = 1;   // Good power: LED on
    else
        POWER_LED_PIN = 0;   // Low power: LED off or blink to indicate warning
}

// -----------------------------------------------------------------
// RN4020 Command Function
// -----------------------------------------------------------------
void RN4020_SendCommand(const char* cmd, char* responseBuffer, unsigned int timeout) {
    if (strlen(cmd) > 0) {
        UART_SendString(cmd);
        UART_Write('\r');
    }
    unsigned int timer = 0;
    unsigned int idx = 0;
    responseBuffer[0] = '\0';  // Clear response buffer
    while (timer < timeout) {
        if (RCIF) {
            char ch = UART_Read();
            responseBuffer[idx++] = ch;
            responseBuffer[idx] = '\0';
            if (ch == '\n') break;  // End of response
        }
        __delay_ms(1);
        timer++;
    }
    if (strlen(responseBuffer) > 0) {
        linkTimeout = 50;  // Refresh link indicator timeout if response received
    }
}

// -----------------------------------------------------------------
// Timer0 Initialization and Interrupt Service Routine
// -----------------------------------------------------------------
void Timer0_Init(void) {
    // Configure Timer0 for periodic interrupts
    // OPTION_REG: Prescaler set to 256 (adjust as needed)
    OPTION_REG = 0x07;  // PS bits = 111 (1:256), T0CS = 0 (Fosc/4 clock)
    TMR0 = 0;           // Initial timer value (adjust if a specific interval is needed)
    TMR0IF = 0;         // Clear Timer0 interrupt flag
    TMR0IE = 1;         // Enable Timer0 interrupt
}

void __interrupt() isr(void) {
    if (TMR0IF) {
        // Reload Timer0 as needed (here, we simply reset to 0)
        TMR0 = 0;
        TMR0IF = 0;
        
        // Update link indicator timeout
        if (linkTimeout > 0) linkTimeout--;
        
        // Update sleep timer
        sleepTimer++;
    }
}
