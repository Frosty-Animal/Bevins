#include <xc.h>
#include <stdio.h>
#include <string.h>

// Configuration: assume a 16MHz clock and 115200 baud UART
#define _XTAL_FREQ 16000000
#define BAUD_RATE 115200

// -----------------------------------------------------------------
// Global Timing Variables and Thresholds
// -----------------------------------------------------------------
volatile unsigned int linkTimeout = 0;   // Refreshed when RN4020 responds
volatile unsigned int sleepTimer = 0;      // Incremented in Timer0 ISR
#define SLEEP_THRESHOLD 5000               // Example threshold (adjust as needed)

// -----------------------------------------------------------------
// UART and RN4020 Bluetooth Module Pin Definitions
// -----------------------------------------------------------------
// RN4020 connections:
//   - RN4020 TX -> PIC RX on RB5
//   - RN4020 RX -> PIC TX on RB7
//   - CTS (from RN4020) is driven by PIC on RB4 (set high)
//   - RTS (from RN4020) is read on PIC RB6
//   - WAKE_HW (to RN4020) is now driven high on RC6 (PIC pin 5)
#define UART_TX_TRIS    TRISB7
#define UART_RX_TRIS    TRISB5
#define CTS_PIN         LATB4
#define CTS_TRIS        TRISB4
#define RN4020_RTS      PORTBbits.RB6
#define WAKE_HW         LATC6           // WAKE_HW now on RC6 (pin 5)
#define WAKE_HW_TRIS    TRISC6          // TRISC6 for WAKE_HW

// -----------------------------------------------------------------
// Local Sensor Definitions
// -----------------------------------------------------------------
// Local potentiometer (for sensor data) is connected to PIC pin 14,
// which corresponds to RA2 (configured as AN2)
#define LOCAL_POT_CHANNEL  2      // AN2 on RA2 (pin 14)
#define POT_TRIS           TRISAbits.TRISA2

// -----------------------------------------------------------------
// LED Definitions
// -----------------------------------------------------------------
// Power indicator LED is connected to PIC pin 4 (assume RC3)
// Link indicator LED is on PIC pin 2, which maps to RC5 per the datasheet.
#define POWER_LED_PIN      LATCbits.LATC3  // Power indicator LED on RC3 (pin 4)
#define POWER_LED_TRIS     TRISCbits.TRISC3

#define LINK_LED_PIN       LATCbits.LATC5  // Link indicator LED on RC5 (pin 2)
#define LINK_LED_TRIS      TRISCbits.TRISC5

// LED control functions (for power/status LED)
void LED_On(void) { POWER_LED_PIN = 1; }
void LED_Off(void) { POWER_LED_PIN = 0; }
void LED_Toggle(void) { POWER_LED_PIN = !POWER_LED_PIN; }

// -----------------------------------------------------------------
// Function Prototypes
// -----------------------------------------------------------------
void UART_Init(void);
void UART_Write(char data);
char UART_Read(void);
void UART_SendString(const char* str);
void WaitFor_RN4020_RTS(void);
void ADC_Init(void);
unsigned int readLocalPot(void);
void RN4020_SendCommand(const char* cmd, char* responseBuffer, unsigned int timeout);
unsigned int readBattery(void);
void checkBattery(void);
void Timer0_Init(void);
void __interrupt() isr(void);

// -----------------------------------------------------------------
// Main Function
// -----------------------------------------------------------------
void main(void) {
    char response[30] = {0};

    // Initialize subsystems
    UART_Init();
    ADC_Init();
    Timer0_Init();  // Initialize Timer0 for periodic interrupts

    // Configure LED outputs:
    POWER_LED_TRIS = 0;   // Power indicator LED (RC3) as output
    LED_Off();            // Start with power LED off
    LINK_LED_TRIS = 0;    // Link indicator LED (RC5) as output
    LINK_LED_PIN = 0;     // Start with link LED off

    // Configure RN4020 control pins:
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;         // Drive WAKE_HW high (RC6) to wake RN4020
    CTS_TRIS = 0;
    CTS_PIN = 1;         // Drive CTS high

    __delay_ms(100);     // Allow RN4020 to power up

    // Enter command mode: send "$$$"
    UART_SendString("$$$");
    LED_Toggle();        // Toggle power LED to indicate command mode entry
    __delay_ms(100);

    // Optionally, read the response (expected "CMD")
    RN4020_SendCommand("", response, 500);
    // (Response check can be added if desired)

    // Send a configuration command (example: set device name)
    RN4020_SendCommand("SN,Transmitter", response, 500);
    __delay_ms(100);

    // Exit command mode (example command, see RN4020 datasheet)
    RN4020_SendCommand("C", response, 500);
    __delay_ms(100);

    // Indicate transmitter is ready
    UART_SendString("Transmitter Ready\r\n");
    LED_On();  // Turn on power LED to indicate good power

    // Refresh link indicator on startup
    linkTimeout = 50;
    sleepTimer = 0; // Reset sleep timer

    while (1) {
        // Update link indicator:
        if (linkTimeout > 0) {
            LINK_LED_PIN = 1;   // Link active
        } else {
            LINK_LED_PIN = 0;   // Link lost
        }
        
        // Continuously read the local potentiometer and send its value
        unsigned int potValue = readLocalPot();
        char dataBuffer[30];
        sprintf(dataBuffer, "POT:%u\r\n", (unsigned char)(potValue >> 2));
        UART_SendString(dataBuffer);
        linkTimeout = 50;   // Refresh link indicator on valid transmission
        
        // Check battery voltage and update the power indicator LED
        checkBattery();
        
        // If no activity occurs, sleepTimer will increment in the ISR.
        // If sleepTimer exceeds the threshold, put the MCU to sleep.
        if (sleepTimer >= SLEEP_THRESHOLD) {
            // Before sleeping, disable interrupts
            di();
            // Optionally, turn off peripherals here
            SLEEP();  // Enter low-power sleep mode
            // MCU wakes up on an interrupt (e.g., Timer0)
            ei();
            sleepTimer = 0;  // Reset sleep timer after waking up
        }
        
        __delay_ms(500);
    }
}

// -----------------------------------------------------------------
// UART Functions
// -----------------------------------------------------------------
void UART_Init(void) {
    // Configure TX (RB7) as output and RX (RB5) as input
    UART_TX_TRIS = 0;
    UART_RX_TRIS = 1;
    
    // WAKE_HW: now on RC6 as output, drive high
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;
    
    // CTS: RB4 as output, drive high
    CTS_TRIS = 0;
    CTS_PIN = 1;
    
    // RTS: RB6 as input
    TRISB6 = 1;
    
    // Setup 115200 baud
    SPBRG = ((_XTAL_FREQ / (16UL * BAUD_RATE)) - 1);
    TXSTA = 0b00100100;  // TX enabled, BRGH = 1 (high speed)
    RCSTA = 0b10010000;  // Serial port enabled, continuous receive
    TXEN = 1;
    SPEN = 1;
}

void WaitFor_RN4020_RTS(void) {
    // Wait until RN4020's RTS (RB6) indicates readiness (active high)
    while (RN4020_RTS == 0) {
        // Optionally add a short delay here
    }
}

void UART_Write(char data) {
    WaitFor_RN4020_RTS();
    while (!TXIF);
    TXREG = data;
}

char UART_Read(void) {
    while (!RCIF);
    return RCREG;
}

void UART_SendString(const char* str) {
    while (*str) {
        UART_Write(*str++);
    }
}

// -----------------------------------------------------------------
// ADC Functions for Local Potentiometer (AN2 on RA2, pin 14)
// -----------------------------------------------------------------
void ADC_Init(void) {
    // Enable analog function on RA2 (bit 2 of ANSELA) for the local potentiometer
    ANSELA |= 0x04;  // 0x04 sets AN2 as analog
    // Configure ADC: right justified, Fosc/32, Vref = VDD.
    ADCON1 = 0xA0;
    ADCON2 = 0x00; // Manual trigger
}

unsigned int readLocalPot(void) {
    // Select channel for local pot (AN2)
    ADCON0 = (LOCAL_POT_CHANNEL << 2);
    ADCON0bits.ADON = 1;              // Turn on ADC
    __delay_us(10);                   // Acquisition time
    ADCON0bits.GO_nDONE = 1;          // Start conversion
    while(ADCON0bits.GO_nDONE);       // Wait for conversion
    unsigned int result = ((unsigned int)ADRESH << 8) | ADRESL;
    return result;
}

// -----------------------------------------------------------------
// RN4020 Command Function
// -----------------------------------------------------------------
void RN4020_SendCommand(const char* cmd, char* responseBuffer, unsigned int timeout) {
    if (strlen(cmd) > 0) {
        UART_SendString(cmd);
        UART_Write('\r');
    }
    unsigned int timer = 0;
    unsigned int idx = 0;
    responseBuffer[0] = '\0';  // Clear response buffer
    while (timer < timeout) {
        if (RCIF) {
            char ch = UART_Read();
            responseBuffer[idx++] = ch;
            responseBuffer[idx] = '\0';
            if (ch == '\n') break;  // End of response
        }
        __delay_ms(1);
        timer++;
    }
    if (strlen(responseBuffer) > 0) {
        linkTimeout = 50;  // Refresh link indicator timeout if response received
    }
}

// -----------------------------------------------------------------
// Battery Voltage Functions (using RA4, AN3)
// -----------------------------------------------------------------
unsigned int readBattery(void) {
    // Battery on AN3 => RA4
    ADCON0 = (BATTERY_ADC_CHANNEL << 2);
    ADCON0bits.ADON = 1;
    __delay_us(10);
    ADCON0bits.GO_nDONE = 1;
    while(ADCON0bits.GO_nDONE);
    unsigned int result = ((unsigned int)ADRESH << 8) | ADRESL;
    return result;
}

void checkBattery(void) {
    unsigned int adcVal = readBattery();
    float voltage = adcVal * (3.3 / 1023.0);
    char buffer[30];
    sprintf(buffer, "Battery: %.2fV\r\n", voltage);
    UART_SendString(buffer);
    
    // Use the power indicator LED on RC3 (pin 4) to indicate power status.
    if (voltage >= 3.0)
        POWER_LED_PIN = 1;   // Good power: LED on
    else
        POWER_LED_PIN = 0;   // Low power: LED off
}

// -----------------------------------------------------------------
// Timer0 Initialization and Interrupt Service Routine
// -----------------------------------------------------------------
void Timer0_Init(void) {
    // Configure Timer0 for periodic interrupts
    // OPTION_REG: Prescaler set to 256 (adjust as needed)
    OPTION_REG = 0x07;  // PS bits = 111 (1:256), T0CS = 0 (Fosc/4 clock)
    TMR0 = 0;           // Initial timer value (adjust if a specific interval is needed)
    TMR0IF = 0;         // Clear Timer0 interrupt flag
    TMR0IE = 1;         // Enable Timer0 interrupt
}

void __interrupt() isr(void) {
    if (TMR0IF) {
        // Reload Timer0 as needed (here, we simply reset to 0)
        TMR0 = 0;
        TMR0IF = 0;
        
        // Update link indicator timeout
        if (linkTimeout > 0) linkTimeout--;
        
        // Update sleep timer
        sleepTimer++;
    }
}

