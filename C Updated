#include <xc.h>
#include <stdio.h>

#define _XTAL_FREQ 16000000      // Assume a 16MHz clock
#define BAUD_RATE 115200

// --- Pin Definitions ---
// WAKE_HW pin: Connected to RN4020 WAKE_HW, e.g., on RC2
#define WAKE_HW         LATC2
#define WAKE_HW_TRIS    TRISC2

// CTS pin: Connected to RN4020 CTS, e.g., on RB4
#define CTS_PIN         LATB4
#define CTS_TRIS        TRISB4

// RTS pin: Connected to RN4020 RTS, e.g., on RB6 (input)
#define RN4020_RTS      PORTBbits.RB6

// UART TX and RX pins (example assignment)
// TX: RC6, RX: RC5
#define UART_TX_TRIS    TRISC6
#define UART_RX_TRIS    TRISC5

// Function Prototypes
void UART_Init(void);
void UART_Write(char data);
char UART_Read(void);
void UART_SendString(const char* str);
void WaitFor_RN4020_RTS(void);

void main(void) {
    UART_Init(); // Initialize UART and control pins

    __delay_ms(100);        // Delay for stabilization
    UART_SendString("$$$");  // Send command to put RN4020 into command mode
    __delay_ms(100);

    while (1) {
        // Simple echo test: read from UART and then transmit back
        char received = UART_Read();
        UART_Write(received);
    }
}

void UART_Init(void) {
    // Configure UART TX and RX pins
    UART_TX_TRIS = 0; // Set TX (RC6) as output
    UART_RX_TRIS = 1; // Set RX (RC5) as input

    // Configure WAKE_HW: set as output and drive high to keep RN4020 awake
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;

    // Configure CTS: set as output and drive high (signal clear-to-send)
    CTS_TRIS = 0;
    CTS_PIN = 1;

    // Configure RN4020 RTS pin: set as input on RB6
    TRISB6 = 1;

    // Baud rate configuration for 115200 bps
    SPBRG = ((_XTAL_FREQ / (16 * BAUD_RATE)) - 1);
    TXSTA = 0b00100100;  // Enable transmission, high-speed mode (BRGH = 1)
    RCSTA = 0b10010000;  // Enable serial port, enable continuous receive

    TXEN = 1;            // Enable transmitter
    SPEN = 1;            // Enable serial port
}

void WaitFor_RN4020_RTS(void) {
    // Wait until the RN4020 indicates it is ready to receive data.
    // (Assuming a HIGH level on RTS means "ready".)
    while (RN4020_RTS == 0) {
        // Optionally add a small delay here.
    }
}

void UART_Write(char data) {
    // Ensure the RN4020 is ready before transmitting
    WaitFor_RN4020_RTS();
    while (!TXIF);  // Wait for TX buffer to be empty
    TXREG = data;   // Transmit data
}

char UART_Read(void) {
    while (!RCIF);  // Wait for data reception
    return RCREG;   // Return the received data
}

void UART_SendString(const char* str) {
    while (*str) {
        UART_Write(*str++);
    }
}
