#include <xc.h>

// Define baud rate for RN4020 (115200 bps)
#define _XTAL_FREQ 16000000   // Assuming a 16MHz clock
#define BAUD_RATE 115200

// Define WAKE_HW pin (connected to PIC Pin 5, assumed to be RC2 for example)
#define WAKE_HW LATC2  
#define WAKE_HW_TRIS TRISC2  

// Define CTS pin (connected to PIC RB4, assumed to be RB4)
#define CTS_PIN LATB4
#define CTS_TRIS TRISB4

void UART_Init(void) {
    // Configure TX (RC6) and RX (RC7) for UART
    TRISC6 = 0; // TX pin output
    TRISC7 = 1; // RX pin input

    // Configure WAKE_HW: Set as output and drive high
    WAKE_HW_TRIS = 0;  
    WAKE_HW = 1;       

    // Configure CTS: Set as output and drive high to indicate "clear to send"
    CTS_TRIS = 0;   
    CTS_PIN = 1;    

    // Baud rate configuration for 115200 bps
    SPBRG = ((_XTAL_FREQ / (16 * BAUD_RATE)) - 1); // Baud rate setting
    TXSTA = 0b00100100; // Transmit enabled, high speed (BRGH = 1)
    RCSTA = 0b10010000; // Serial port enabled, continuous receive enabled

    // Enable the UART module
    TXEN = 1; // Enable transmission
    SPEN = 1; // Enable serial port
}

void UART_Write(char data) {
    while (!TXIF); // Wait until TX buffer is empty
    TXREG = data;  // Load data into transmit register
}

char UART_Read(void) {
    while (!RCIF); // Wait for data reception
    return RCREG;  // Return received data
}

void UART_SendString(const char* str) {
    while (*str) {
        UART_Write(*str++);
    }
}

void main() {
    UART_Init(); // Initialize UART, WAKE_HW, and CTS

    __delay_ms(100); // Delay before sending command mode sequence
    UART_SendString("$$$"); // Command to enter RN4020 command mode
    __delay_ms(100);

    while (1) {
        // Echo received characters (for debugging)
        char received = UART_Read();
        UART_Write(received); // Echo back the character
    }
}
