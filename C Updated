#include <xc.h>
#include <stdio.h>
#include <string.h>

#define _XTAL_FREQ 16000000
#define BAUD_RATE 115200

// -----------------------------------------------------------------
// UART and RN4020 Bluetooth Module Pin Definitions
// -----------------------------------------------------------------
// RN4020 connections:
//   - RN4020 TX -> PIC RX on RB5
//   - RN4020 RX -> PIC TX on RB7
//   - CTS (from RN4020) is driven by PIC on RB4
//   - RTS (from RN4020) is read on PIC RB6
//   - WAKE_HW (to RN4020) is now driven high on RC6 (PIC pin 5)
#define UART_TX_TRIS    TRISB7
#define UART_RX_TRIS    TRISB5
#define CTS_PIN         LATB4
#define CTS_TRIS        TRISB4
#define RN4020_RTS      PORTBbits.RB6
#define WAKE_HW         LATC6           // WAKE_HW now on RC6 (pin 5)
#define WAKE_HW_TRIS    TRISC6          // TRISC6 for WAKE_HW
#define FAULT_FLAG         PORTCbits.RC4
#define FAULT_FLAG_TRIS    TRISCbits.TRISC4
#pragma config FOSC = INTOSC    // Internal oscillator
#pragma config WDTE = OFF       // Watchdog Timer disabled
#pragma config PWRTE = ON       // Power-up Timer enabled
#pragma config MCLRE = OFF      // MCLR pin function is digital input
#pragma config CP = OFF         // Program memory not protected
#pragma config BOREN = ON       // Brown-out Reset enabled
// -----------------------------------------------------------------
// Motor Control Pin Definitions
// -----------------------------------------------------------------
// We assume that the motor driver uses two PWM waves:
//   - One for SR control (speed), mapped to PWMH_DUTY and PWML_DUTY
//   - A separate phase control is handled via a dedicated output (PHASE_PIN)
#define PWMH_DUTY    PWM1DCH
#define PWML_DUTY    PWM2DCH
#define PWMH_TRIS    TRISAbits.TRISA0   // PWM output for forward drive
#define PWML_TRIS    TRISAbits.TRISA1   // PWM output for reverse drive

// Phase control (direction) output:
#define PHASE_PIN      LATC1
#define PHASE_TRIS     TRISC1

// -----------------------------------------------------------------
// Battery Voltage Monitoring
// -----------------------------------------------------------------
// Battery is measured on RA4 (pin 20), configured as AN3
#define BATTERY_ADC_CHANNEL 3

// -----------------------------------------------------------------
// Local Switch & Potentiometer for Testing
// -----------------------------------------------------------------
// Switch on PIC pin 19 (assume RA5). Active low: 0 = pressed
#define SWITCH_PIN          PORTAbits.RA5
#define SWITCH_TRIS         TRISAbits.TRISA5
// On-board pot on PIC pin 11 (assume RA2), configured as AN2
#define LOCAL_POT_CHANNEL   2

// -----------------------------------------------------------------
// Function Prototypes
// -----------------------------------------------------------------
void UART_Init(void);
void UART_Write(char data);
char UART_Read(void);
void UART_SendString(const char* str);
void WaitFor_RN4020_RTS(void);

void Motor_Init(void);
void updateMotorSpeed(void);  // motor ramping function

void ADC_Init(void);
unsigned int readBattery(void);
void checkBattery(void);

unsigned int readLocalPot(void);
void checkLocalPot(void);

void processReceivedData(const char *data);

// -----------------------------------------------------------------
// Global variables for motor ramping
// -----------------------------------------------------------------
// tidc: target duty cycle (0..255)
// rdc: running (current) duty cycle (0..255)
// rdir: motor direction, 0 = forward, 1 = reverse
volatile unsigned char tidc = 0;
volatile unsigned char rdc = 0;
volatile unsigned char rdir = 0;

// -----------------------------------------------------------------
// Main Function
// -----------------------------------------------------------------
void main(void) {
    // Initialize all subsystems
    UART_Init();    
    Motor_Init();   
    ADC_Init();     

    // Configure the switch pin (RA5) as a digital input
    SWITCH_TRIS = 1;  

    // Configure the phase pin (RC1) as output and set it high (assuming always on)
    PHASE_TRIS = 0;
    PHASE_PIN = 1; 

    __delay_ms(100);
    UART_SendString("$$$");  // Put RN4020 in command mode (example)
    __delay_ms(100);

    // Optionally, send an initial message
    UART_SendString("Receiver Ready\r\n");

    // Main loop
    while (1) {
        checkBattery();
        checkFaultFlag()
        // If the test switch is pressed, use the on-board potentiometer for control
        if (SWITCH_PIN == 0) {
            checkLocalPot();
        } else {
            // Otherwise, if data is received from the transmitter, process it.
            if (RCIF) {
                char receivedBuffer[50] = {0};
                unsigned char idx = 0;
                // Read available characters until newline or buffer full
                while (RCIF && (idx < sizeof(receivedBuffer) - 1)) {
                    char ch = UART_Read();
                    receivedBuffer[idx++] = ch;
                    if (ch == '\n') break;
                }
                receivedBuffer[idx] = '\0';
                processReceivedData(receivedBuffer);
            }
        }

        // Update motor speed by ramping toward target duty cycle.
        updateMotorSpeed();

        __delay_ms(50);  // Adjust loop delay as needed
    }
}

// -----------------------------------------------------------------
// UART Functions
// -----------------------------------------------------------------
void UART_Init(void) {
    // Configure TX and RX
    UART_TX_TRIS = 0;  // RB7 as output (TX)
    UART_RX_TRIS = 1;  // RB5 as input (RX)

    // WAKE_HW: now on RC6 as output, drive high
    WAKE_HW_TRIS = 0;
    WAKE_HW = 1;

    // CTS: RB4 as output, drive high
    CTS_TRIS = 0;
    CTS_PIN = 1;

    // RTS: RB6 as input
    TRISB6 = 1;

    // Setup 115200 baud
    SPBRG = ((_XTAL_FREQ / (16UL * BAUD_RATE)) - 1);
    TXSTA = 0b00100100;  // TX enabled, BRGH = 1 (high speed)
    RCSTA = 0b10010000;  // Serial port enabled, continuous receive
    TXEN = 1;            
    SPEN = 1;            
}

void WaitFor_RN4020_RTS(void) {
    // Wait until RN4020 indicates it's ready
    while (RN4020_RTS == 0) {
        // Optionally add a short delay
    }
}

void UART_Write(char data) {
    WaitFor_RN4020_RTS();  
    while (!TXIF);        
    TXREG = data;         
}

char UART_Read(void) {
    while (!RCIF);        
    return RCREG;         
}

void UART_SendString(const char* str) {
    while (*str) {
        UART_Write(*str++);
    }
}

// -----------------------------------------------------------------
// Motor Control Functions
// -----------------------------------------------------------------
void Motor_Init(void) {
    // Configure PWM outputs for motor speed control
    PWMH_TRIS = 0;  // PWMH for forward drive
    PWML_TRIS = 0;  // PWML for reverse drive

    // Initialize PWM duty cycles to zero
    PWMH_DUTY = 0;
    PWML_DUTY = 0;
}

// updateMotorSpeed() gradually changes the running duty cycle (rdc)
// toward the target (tidc) using a fixed step. Then it updates the PWM outputs
// based on the motor direction (rdir).
void updateMotorSpeed(void) {
    unsigned char step = 4; // ramp step (adjust for faster/slower ramping)

    if (rdc < tidc) {
        rdc += step;
        if (rdc > tidc)
            rdc = tidc;
    } else if (rdc > tidc) {
        if (rdc < step)
            rdc = 0;
        else
            rdc -= step;
        if (rdc < tidc)
            rdc = tidc;
    }
    
    // Update PWM outputs:
    // For forward (rdir==0): drive PWMH_DUTY, zero PWML_DUTY.
    // For reverse (rdir==1): drive PWML_DUTY, zero PWMH_DUTY.
    if (rdir == 0) {
        PWMH_DUTY = rdc;
        PWML_DUTY = 0;
    } else {
        PWMH_DUTY = 0;
        PWML_DUTY = rdc;
    }
}

// -----------------------------------------------------------------
// ADC / Battery Voltage Functions
// -----------------------------------------------------------------
void ADC_Init(void) {
    // Enable analog on RA4 (for battery, AN3) and RA2 (for local pot, AN2)
    // For example, RA2 is bit 2 and RA4 is bit 4 => 0x14 = b00010100
    ANSELA |= 0x14;

    // Configure ADC: right justified, Fosc/32, Vref = VDD.
    ADCON1 = 0xA0;
    ADCON2 = 0x00; // Manual trigger
}

unsigned int readBattery(void) {
    // Battery on AN3 => RA4
    ADCON0 = (BATTERY_ADC_CHANNEL << 2);
    ADCON0bits.ADON = 1;
    __delay_us(10);
    ADCON0bits.GO_nDONE = 1;
    while (ADCON0bits.GO_nDONE);
    unsigned int result = ((unsigned int)ADRESH << 8) | ADRESL;
    return result;
}

void checkBattery(void) {
    unsigned int adcVal = readBattery();
    float voltage = adcVal * (3.3 / 1023.0);
    char buffer[30];
    sprintf(buffer, "Battery: %.2fV\r\n", voltage);
    UART_SendString(buffer);
}

// -----------------------------------------------------------------
// Local Pot Reading Functions
// -----------------------------------------------------------------
unsigned int readLocalPot(void) {
    // Local pot on AN2 => RA2
    ADCON0 = (LOCAL_POT_CHANNEL << 2);
    ADCON0bits.ADON = 1;
    __delay_us(10);
    ADCON0bits.GO_nDONE = 1;
    while (ADCON0bits.GO_nDONE);
    return ((unsigned int)ADRESH << 8) | ADRESL;
}

// checkLocalPot() reads the on-board potentiometer when the test switch is pressed.
// It converts the 10-bit ADC reading (0-1023) to a value in the range 0-255 and sets
// tidc (target duty cycle) accordingly. For local testing, we assume forward direction.
void checkLocalPot(void) {
    if (SWITCH_PIN == 0) {
        unsigned int potVal = readLocalPot();
        unsigned char speed = (unsigned char)(potVal >> 2);
        tidc = speed;     // update target duty cycle
        rdir = 0;         // assume forward direction for local testing
        char buf[30];
        sprintf(buf, "Local Pot: %u\r\n", speed);
        UART_SendString(buf);
    }
}

// -----------------------------------------------------------------
// Process Received Data from the Transmitter
// -----------------------------------------------------------------
// This function expects data in the format: "DC:<duty>, DIR:<dir>\r\n"
// For example: "DC:45, DIR:FWD\r\n"
// It parses the duty cycle and direction and updates tidc and rdir.
void processReceivedData(const char *data) {
    // Check for command type
    if (strncmp(data, "MTR:", 4) == 0) {
        // Motor command
        int duty;
        char direction[4];
        
        if (sscanf(data + 4, "%d,%3s", &duty, direction) == 2) {
            // Validate duty cycle range
            if (duty >= 0 && duty <= 255) {
                tidc = (unsigned char)duty;
                
                // Set direction
                if (strcmp(direction, "FWD") == 0) {
                    rdir = 0;
                } else if (strcmp(direction, "REV") == 0) {
                    rdir = 1;
                } else {
                    UART_SendString("ERR:INVALID_DIR\r\n");
                    return;
                }
                
                // Acknowledge
                char response[30];
                sprintf(response, "ACK:MTR,%d,%s\r\n", tidc, rdir ? "REV" : "FWD");
                UART_SendString(response);
            } else {
                UART_SendString("ERR:DUTY_RANGE\r\n");
            }
        } else {
            UART_SendString("ERR:FORMAT\r\n");
        }
    } 
    else if (strncmp(data, "STAT?", 5) == 0) {
        // Status request
        char status[50];
        unsigned int batteryADC = readBattery();
        float voltage = batteryADC * (3.3 / 1023.0);
        
        sprintf(status, "STAT:%d,%s,%.1fV\r\n", 
                rdc, rdir ? "REV" : "FWD", voltage);
        UART_SendString(status);
    }
    else {
        UART_SendString("ERR:UNKNOWN_CMD\r\n");
    }
}


// Error handling function for motor driver faults
void PWM_Init(void) {
    // Configure Timer2 for PWM operation
    PR2 = 101;           // Period value for ~19.6 kHz with 16MHz clock
    T2CON = 0x00;        // Prescaler = 1, timer off initially
    
    // Configure PWM modules
    CCP1CON = 0x0C;      // PWM mode for CCP1
    CCP2CON = 0x0C;      // PWM mode for CCP2
    
    // Start Timer2
    TMR2IF = 0;
    TMR2 = 0;
    TMR2ON = 1;          // Turn on Timer2
    
    // Wait for Timer2 to overflow once
    while (!TMR2IF);
    
    // Initialize PWM duty cycles to 0
    PWMH_DUTY = 0;
    PWML_DUTY = 0;
}

// Define the missing fault check function
void checkFaultFlag(void) {
    // Check if fault pin is active (active low)
    if (FAULT_FLAG == 0) {
        // Disable motor outputs
        PWMH_DUTY = 0;
        PWML_DUTY = 0;
        
        // Notify about fault
        UART_SendString("FAULT:DETECTED\r\n");
        
        // Wait for fault to clear
        while (FAULT_FLAG == 0) {
            __delay_ms(100);
        }
        
        // Notify fault cleared
        UART_SendString("FAULT:CLEARED\r\n");
    }
}
